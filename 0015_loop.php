В PHP у нас есть следующие типы циклов:

while       - выполняет цикл по блоку кода до тех пор, пока указанное условие является истинным
do...while  — выполняет блок кода один раз, а затем повторяет цикл до тех пор, пока выполняется заданное условие
for         - выполняет цикл по блоку кода заданное количество раз
foreach     - перебирает блок кода для каждого элемента в массиве



while       - выполняет блок кода до тех пор, пока выполняется заданное условие.
<?php
$i = 1;
while ($i < 6) {
    echo $i;
    $i++;
}

$i = 1;
while ($i < 6):
  echo $i;
  $i++;
endwhile;

$i = 0;
while ($i < 100) {
  $i+=10;
  echo $i . "<br>";
}
?>

break       - выход из цикла
<?php
$i = 1;
while ($i < 6) {
    if ($i == 3) break;
    echo $i;
    $i++;
}
?>

continue    - сбрасывает текущую итерацию и продолжает со следующего
<?php
$i = 0;
while ($i < 6) {
  $i++;
  if ($i == 3) continue;
  echo $i;
}
?>



do...while  - всегда будет выполнять блок кода хотя бы один раз, 
              затем он проверит условие и будет повторять цикл, пока указанное условие истинно.
              
do...while  - условие проверяется ПОСЛЕ выполнения операторов внутри цикла. 
              Это означает, что цикл do...while выполнит свои операторы хотя бы один раз, 
              даже если условие ложно.

<?php
$i = 1;

do {
  echo $i;
  $i++;
} while ($i < 6);
?>



for         - используется, когда вы знаете, сколько раз должен выполняться скрипт.

for (expression1, expression2, expression3) {
  // code block
}

Вот как это работает:
    выражение 1 вычисляется один раз
    выражение 2 вычисляется перед каждой итерацией
    выражение 3 вычисляется после каждой итерации

<?php
for ($x = 0; $x <= 10; $x++) {
    echo "The number is: $x <br>";
  }

for ($x = 0; $x <= 100; $x+=10) {
    echo "The number is: $x <br>";
  }
?>


foreach     - используется для перебора элементов массива.
<?php
$colors = array("red", "green", "blue", "yellow");

foreach ($colors as $x) {
    echo "$x <br>";
}
?>
При каждой итерации цикла значение текущего элемента массива присваивается переменной $x. 
Итерация продолжается до тех пор, пока не будет достигнут последний элемент массива.



<?php
$members = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");

foreach ($members as $x => $y) {
    echo "$x : $y <br>";
}
?>

foreach     - использоваться для перебора свойств объекта:
<?php
class Car {
    public $color;
    public $model;
    public function __construct($color, $model) {
      $this->color = $color;
      $this->model = $model;
    }
  }
  
  $myCar = new Car("red", "Volvo");
  
  foreach ($myCar as $x => $y) {
    echo "$x: $y <br>";
  }
?>

При переборе элементов массива любые изменения, внесённые в элемент массива, по умолчанию НЕ влияют на исходный массив:
<?php
$colors = array("red", "green", "blue", "yellow");

foreach ($colors as $x) {
  if ($x == "blue") $x = "pink";
}

var_dump($colors);
?>

НО при использовании символа & в объявлении foreach элемент массива присваивается по ссылке, что приводит к тому, что любые изменения, внесённые в элемент массива, будут внесены и в исходный массив:
<?php
$colors = array("red", "green", "blue", "yellow");

foreach ($colors as &$x) {
  if ($x == "blue") $x = "pink";
}

var_dump($colors);
?>

